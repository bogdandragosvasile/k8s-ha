name: Kubernetes HA Cluster Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: create, start, stop, or destroy'
        required: true
        type: choice
        options:
          - create
          - start
          - stop
          - destroy

jobs:
  manage-k8s-ha:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update and upgrade packages (for create)
        if: github.event.inputs.action == 'create'
        run: |
          sudo apt update
          sudo apt upgrade -y

      - name: Install virtualization dependencies if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          PACKAGES="bridge-utils qemu-kvm virtinst libvirt-dev libvirt-daemon virt-manager"
          TO_INSTALL=""
          for pkg in $PACKAGES; do
            if ! dpkg -l | grep -q $pkg; then
              TO_INSTALL="$TO_INSTALL $pkg"
            fi
          done
          if [ ! -z "$TO_INSTALL" ]; then
            sudo apt install -y $TO_INSTALL
          else
            echo "Virtualization dependencies already installed. Skipping."
          fi

      - name: Check KVM support (for create)
        if: github.event.inputs.action == 'create'
        run: kvm-ok

      - name: Install Vagrant if not present (for create, start, stop, destroy)
        if: github.event.inputs.action != 'stop'
        run: |
          if ! command -v vagrant &> /dev/null; then
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update
            sudo apt install -y vagrant
            vagrant plugin install vagrant-libvirt vagrant-disksize vagrant-vbguest
          else
            echo "Vagrant already installed. Skipping."
          fi

      - name: Install Ansible if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! command -v ansible &> /dev/null; then
            sudo apt install -y software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt install -y ansible python3-passlib
          else
            echo "Ansible already installed. Skipping."
          fi

      - name: Generate SSH keys if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if [ ! -f ansible/vagrant ] || [ ! -f ansible/vagrant.pub ]; then
            ssh-keygen -t rsa -b 4096 -f ansible/vagrant -N ""
            chmod 600 ansible/vagrant
            chmod 644 ansible/vagrant.pub
          else
            echo "SSH keys already exist. Skipping generation."
          fi

      - name: Run make install (for create)
        if: github.event.inputs.action == 'create'
        run: make install

      - name: Run make up (provision VMs - for create or start)
        if: github.event.inputs.action == 'create' || github.event.inputs.action == 'start'
        run: make up

      - name: Clear known hosts (if necessary - for create)
        if: github.event.inputs.action == 'create'
        run: |
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.51 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.52 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.101 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.102 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.103 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.201 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.202 || true
          ssh-keygen -f $HOME/.ssh/known_hosts -R 172.16.16.203 || true

      - name: Run make cluster (setup Kubernetes cluster - for create)
        if: github.event.inputs.action == 'create'
        run: make cluster

       - name: Install kubectl if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          else
            echo "kubectl already installed. Skipping."
          fi

      - name: Verify cluster (for create)
        if: github.event.inputs.action == 'create'
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Helm if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! command -v helm &> /dev/null; then
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          else
            echo "Helm already installed. Skipping."
          fi

      - name: Install Cert-Manager if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! kubectl get namespace cert-manager &> /dev/null; then
            helm repo add jetstack https://charts.jetstack.io --force-update
            helm repo update
            helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true
          else
            echo "Cert-Manager already installed. Skipping."
          fi

      - name: Configure Let's Encrypt ClusterIssuer (for create)
        if: github.event.inputs.action == 'create'
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-production
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: your-email@example.com  # Replace with your actual email
              privateKeySecretRef:
                name: letsencrypt-production
              solvers:
                - http01:
                    ingress:
                      class: nginx  # Adjust if using a different ingress class
          EOF

      - name: Install HashiCorp Vault if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! kubectl get namespace vault &> /dev/null; then
            helm repo add hashicorp https://helm.releases.hashicorp.com --force-update
            helm repo update
            helm install vault hashicorp/vault --namespace vault --create-namespace --set "server.dev.enabled=true"
            kubectl exec -n vault -it vault-0 -- vault operator init -key-shares=1 -key-threshold=1
            kubectl exec -n vault -it vault-0 -- vault operator unseal $(kubectl exec -n vault -it vault-0 -- vault operator init -format=json | jq -r '.unseal_keys_b64[0]')
          else
            echo "Vault already installed. Skipping."
          fi

      - name: Install ArgoCD if not present (for create)
        if: github.event.inputs.action == 'create'
        run: |
          if ! kubectl get namespace argocd &> /dev/null; then
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
          else
            echo "ArgoCD already installed. Skipping."
          fi

      - name: Configure SSO for ArgoCD (GitHub example - for create)
        if: github.event.inputs.action == 'create'
        run: |
          kubectl patch configmap argocd-cm -n argocd --type merge -p '{
            "data": {
              "url": "https://argocd.example.com",  # Replace with your ArgoCD URL
              "dex.config": "connectors:\n- type: github\n  id: github\n  name: GitHub\n  config:\n    clientID: $GITHUB_CLIENT_ID  # Set as GitHub secret or env var\n    clientSecret: $GITHUB_CLIENT_SECRET  # Set as GitHub secret or env var\n    orgs:\n    - name: your-github-org"
            }
          }'

      - name: Deploy test nginx (for create)
        if: github.event.inputs.action == 'create'
        run: |
          kubectl create deployment nginx-deployment --image=cgr.dev/chainguard/nginx:latest
          kubectl expose deployment nginx-deployment --port=8080 --target-port=80
          kubectl get pods -o wide
          kubectl get services

      - name: Stop cluster (for stop)
        if: github.event.inputs.action == 'stop'
        run: vagrant halt

      - name: Destroy cluster (for destroy)
        if: github.event.inputs.action == 'destroy'
        run: vagrant destroy -f

      - name: Cleanup test deployment (for create)
        if: always() && github.event.inputs.action == 'create'
        run: |
          kubectl delete service nginx-deployment || true
          kubectl delete deployment nginx-deployment || true
